<section class="content">
    <div class="container-fluid">
        <div class="row">
            <% array.forEach(function(item) { %>
                
                <div class="col-lg-3 col-6">
                    <!-- small box -->
                    <div class="small-box <%= item.class %>">
                        
                        <div class="inner">
                            <h3><%= item.count %></h3>
                            <p><%= item.title %></p>
                        </div>
                        
                        <div class="icon">
                            <i class="<%= item.icon %>"></i>
                        </div>
                        <a href="<%= item.route %>" class="small-box-footer">View <%= item.title %> <i class="fas fa-arrow-circle-right"></i></a>
                    </div>
                </div>
                <% }); %> 
            </div>
        </section>
        

        const editAdminProfile = async(req,res)=>{
    
    const user = await User.findOne({where:{id:req.user_id,role:ROLES.ADMIN_ROLE},attributes:{exclude:['password']}});    
    res.render('profile',{data:req,title:"Profile",user})
    
}

const updateAdminProfile = async(req,res)=>{
    
    try {
        const result = adminValidation(req.body);
        if(result.error){
            return res.status(422).json({status:false,error:result.error.message});
        }
        const id = req.user_id;
        var {
            first_name,
            image,
            email,
            password
        } = req.body
        
        var data = {
            id,
            first_name,
            email
        }
        
        if(image != 'undefined' && image != ''){
            
            var dir = './storage/images/users'
            if (!fs.existsSync(dir)){
                fs.mkdirSync(dir);
            }  
            
            //Image Upload
            if(image != undefined && image != ''){
                var imageType = image.substring(
                    image.indexOf("/") + 1, 
                    image.lastIndexOf(";")
                    );
                    
                    if(imageType != "png" && imageType != "jpeg" && imageType != "jpg" && imageType != "gif"){
                        return res.status(422).json({status:true,error:'Image format not supported!'});
                    }
                    
                    var imageName = Date.now().toString()+"."+imageType;
                    
                    var base64Data = req.body.image.replace(/^data:image\/[a-z]+;base64,/, "");
                    await fs.writeFile(path.join(__dirname,'../storage/images/users',imageName), base64Data, 'base64', function(err) {
                        console.log(err,'image');
                    });
                    data.image = imageName;
                }
                
                //remove existing image code
                if(id != '' && image != undefined && image != ''){
                    const getUserImage = await User.findOne({where:{id},
                        attributes:['id','image'],
                        raw:true
                    });
                    console.log(getUserImage.image);
                    if(getUserImage.image != null){
                        fs.unlinkSync(process.cwd()+"/storage/images/users/"+getUserImage.image);
                        await User.update({image:null},{where:{id}});
                    }
                }
            }
            
            
            
            if(password != "undefined" && password != ''){
                const salt = await bcrypt.genSalt(10);
                const hashPassword = await bcrypt.hash(password,salt);
                data.password = hashPassword;
            }
            
            const updateUser = await User.update(data,{where:{id}});
            return res.status(200).json({status:true,message:"Profile updated successfully!"});
            
        } catch (error) {
            return res.status(400).json({status:false,error:error.message});    
        }
        
    }
    
    const checkDuplicateEmail = async(req,res)=>{
        
        const checkEmail = await User.findOne({where:{email:req.body.email}});
        const id  = req.body.id;
        if(checkEmail){
            if(id != undefined && id == checkEmail.id){
                return res.send("true");
            }else{
                return res.send("false");
            }
        }else{
            return res.send('true');
        }
    }    
    
    const multipleDelete = async(req,res)=>{
        try {
            const ids = req.body.ids
            const deleteUsers = await User.destroy({where:{id:ids}});
            return res.status(200).json({status:true,message:'Data deleted successfully!'});
        } catch (error) {
            return res.status(400).json({status:false,error:error.message});
        }
    }